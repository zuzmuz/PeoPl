#+TITLE: PeoPl Language Specification
#+AUTHOR: Zaher Hamadeh
#+DATE: May 21, 2025

* Table of content :toc:
- [[#what-is-peopl][What is PeoPl]]
- [[#a-peopl-file][A Peopl File]]
- [[#comments][Comments]]
- [[#expressions-intro][Expressions (intro)]]
  - [[#pipes][Pipes]]
- [[#values][Values]]
  - [[#literals][Literals]]
  - [[#primitives][Primitives]]
- [[#operations][Operations]]
  - [[#operations-and-operators][Operations and operators]]
- [[#how-piping-works][How Piping Works]]
  - [[#data-flow][Data flow]]
  - [[#piping][Piping]]
  - [[#input-capturing-in-pipelines][Input Capturing in Pipelines]]
  - [[#pattern-matching][Pattern Matching]]
  - [[#piping-complex-data-structures][Piping Complex Data Structures]]
- [[#functions][Functions]]
  - [[#functions-with-inputs][Functions with inputs]]
  - [[#function-arguments][Function arguments]]
  - [[#calling-functions][Calling functions]]
- [[#definitions][Definitions]]
  - [[#types][Types]]
  - [[#records-tuples][Records, Tuples]]
  - [[#choices-enums-tagged-unions][Choices, Enums, Tagged Unions]]
  - [[#functions-1][Functions]]

* What is PeoPl

PeoPl is *Pipeline Expression Oriented Programming Language*.

It is a general purpose, compiled, statically typed programming language.
Here are the features highlights:
- Expressive pipeline oriented programming style 
- Powerful and expressive type system for domain modeling
- Low level control
- Expressive generics system
  
Programs are constructed as pipelines of operations,
where each operation receives data, transforms it, and passes it forward.

Check [[file:../examples/main.ppl][this file]] for a comprehensive list of a PeoPl features.

* A Peopl File

A PeoPl source file ends with the file extension `ppl`.
It contains top level definitions.
Definitions define compile time constructs, like values, expressions, types, functions.

If running in single file mode, one definition must exist in the file, and it is the main function.

#+BEGIN_SRC peopl
  main: 0
#+END_SRC

This is the simplest PeoPl file.
Here main is defined as the value 0.
Running this file will call main, the program will then terminate with the value of `main`,
which is 0.

`main` should be, or should return, an 8 bit integer.

`main` can be a function that runs at run time and calculate its output value.
This is how functions are defined

#+BEGIN_SRC peopl
  main: 'func [] -> Int {
      0
  }
#+END_SRC

More on [[#functions][functions]] later.

* Comments
Let's get this out of the way, start a comment by writing two forward slashes.
Multiline comments are not supported. Because I didn't bother implementing them.
The actual reason is a opinionated one. I don't use them, and I don't think anyone should.
They introduce the problem of nesting multiline comment blocks. In C, this is not possible.
A language designer might decide to support nested multiline comments, why bother.
They're only useful when commenting a small region, a part of a line. Even if this case,
thi doesn't justify their existence.


#+BEGIN_SRC peopl
  // this is a comment
  main: 'func [] -> Int { // this is also a comment
      0
  }
#+END_SRC

* Expressions (intro)

Before dealing with functions we need to cover expressions.
A function body is comprised of and only expressions.
Expressions are like functions, in a sense that they can take an input, and always return an output.

#+BEGIN_SRC peopl
"hello"                    // A string literal expression returning "hello"
42                         // An integer literal expression returning 42
2 + 3                      // A binary operation expression returning 5
#+END_SRC

Therefor, a function is basically a composition of expressions, a pipeline of computational nodes.
It's technically a bunch of expressions bundled together with a name associated to them.

** Pipes
To do anything useful with expressions, we need an interesting piping mechanism.
Let's first imagine expressions as blocks

#+BEGIN_SRC
 ╭───────╮
─┤a block├─
 ╰───────╯
#+END_SRC

It takes an input, maybe some extra arguments, and produces an output.

#+BEGIN_SRC
       extra arguments
       ╭┴──────╮
input ─┤a block├─ output
       ╰───────╯
#+END_SRC

Let's chain a bunch of these

#+BEGIN_SRC
       extra arguments    extra arguments 
       ╭┴──────╮          ╭┴──────╮
input ─┤block 1├─ output ─┤block 2├─ output
       ╰───────╯          ╰───────╯
#+END_SRC

In code piping is performed using the pipe operator known in functional programming languages

#+BEGIN_SRC peopl
// Piping a string through functions
"hello world" |> reverse()            // Returns "dlrow olleh"
#+END_SRC

PeoPl's expression-only design eliminates the statement/expression dichotomy found in many languages.

We'll get into more details about [[#how-piping-works][piping]] later

* Values
Before getting into expressions and pipelines, let's discuss values.
Values are expressions, the elemental expressions.
The take on input, and return themselves as output.
** Literals
First example of values are literals

#+BEGIN_SRC peopl
  2                       // integer literal
  1_000_000               // _ is supported to separate long integer numbers
  0xFF468A                // hex integer litera
  0xABCD_1234_AFDE_0987   // hex also supports _
  0b1010_1010_1110        // binary
  0o1727432               // octal

  0.234                   // floating point literal

  "sdfsdfsdf"             // string literal, they are multiline by default (don't know if this is a good idea)

  true                    // boolean literal
  false                   // boolean literal

  nothing                 // the nothing literal, value representing the unit type, the empty tuple
  _                       // alias to the nothing literal
#+END_SRC

*** TODO String literals are not covered yet cause I haven't figured out how to implement them yet.
** Primitives
PeoPl's primitives are intrinsic, part of the inner logic of the compiler.
They are not exposed to the user of the language.
Instead, wrapper nominal types are available, that can be used as regular types
| Type | intrinsic  |
|------+------------|
| I8   | int8/byte  |
| I16  | int16      |
| I32  | int32      |
| I64  | int64      |
| U8   | uint8/char |
| U16  | uint16     |
| U32  | uint32     |
| I64  | int64      |
| F32  | float32    |
| F64  | float64    |

The idea behind hiding primitives away from users is that primitives are treated like every other type.
The can be extended and used like every other type, thee difference lies in how the eventual compiled program behaves.

* Operations
** Operations and operators
The second building blocks are operations.
This is a list of all operators
- multiplicative operators, `*, /, %`
- additive operators, `+, -`
- comparative operators, `=, >=, >, <=, <`
- logic operators `and or not`

  
This is a list of legal operations in PeoPl
- unary: `operator operand`, if the unary expression has a valid input, it will apply the operation
- binary: `lhs operator rhs`

PeoPl interestingly allows a unary expressions to be formed by any type of operator, not just the additive ones.
For example `*3` is a valid expression and it represents an expression where its input should be an integer
and it returns the result of the multiplication of the input and 3.

* How Piping Works
** Data flow
Data flows through nodes, PeoPl is designed to have a powerful piping system.
It utilizes simple and friendly syntax to enable powerful features
- piping
- pattern matching
- destructuring
- branching

** Piping
Piping is first class in PeoPl and behaves a litle bit like extension methods (in GO, Kotlin, Swift, Rust),
or regular functions in functional programming languages.
The distinction between functions in PeoPl and other functional programming languages is that,
a function input is treated in a special way over other function arguments.

** Input Capturing in Pipelines

PeoPl doesn't support assignments. It's crazy right.
Well it is not technically needed. To have a name for the input of an expression,
capture it by binding it to a local identifiers. You might like to call this a "local variable" (but it's not).
This is done using the input capture syntax with the vertical bar notation `|$name|`.

#+BEGIN_SRC peopl
// Input capturing using |$name| syntax
12321
|> toString()
|> |$value| value = value.reverse() // Returns true (palindrome check)
#+END_SRC

** Pattern Matching
Input capturing is pattern matching.
In the previous example, the output of `toString()` is matched with the label value.
The `$` sign is used to bind inputs to labels. Think of it like assignment, but backwards.

*** Branching

Pattern matching is not only for binding values.
It also allows for branching.
Input can be matched to exact values, or binded to labels but with guard expressions.

#+BEGIN_SRC peopl
// Basic pattern matching on values
value
|>
|0| "Zero",
|1| "One",
|$n if n < 0| "Negative",
|$n if n % 2 = 0| "Even",
|_| "Other"
#+END_SRC

*** Destructuring

Pattern matching can be complex, it also can be performed on [[*Tuples][tuples]] and [[*Tagged unions][tagged unions]],
which will be covered later.

** Piping Complex Data Structures

PeoPl uses product types (tuples, records) to pass complex data structure

Records (objects with named fields) can be passed through pipelines and accessed directly within transformation nodes

*** Tuples

Tuples (ordered collections of values) can be processed efficiently:

#+BEGIN_SRC peopl
// Piping a tuple through a transformation
.(10, 5)
|> |$dimensions| dimensions._0 * dimensions._1  // Returns 50
#+END_SRC

*** Records

Records are tuples with named members

#+BEGIN_SRC peopl
// Piping a record
.(width: 10, height: 5)
|> |$in| in.width * in.height  // Returns 50


// Piping a record and anonymous capture
.(width: 10, height: 5)
|> |$| width * height  // Returns 50
#+END_SRC

*** Nested Structures

Pattern matching and bindings can be performed on nested structures, used for destructuring.

#+BEGIN_SRC peopl
// Processing nested data
.(
  user: .(name: "Abdulla", birthyear: 1934),
  role: "admin"
)
|> |$data| .(
  username: data.user.name,
  age: 2025 - data.user.birthyear,
  canEdit: data.role = "admin"
)

// Nested pattern matching
.(
  user: (name: "Abdulla", birthyear: 1934),
  role: "admin"
)
|> |.(user: .(name: "Hanine", birthyear: $year, role: $role)| "Hanin is born in $birthyear"
#+END_SRC

* Functions

Functions are blocks of expressions that most commonly run at runtime.
Similar to bash programs, each function has an input, extra arguments, and returns an output.
In bash, the input and output are usually text, coming from stdin and going to stdout.
However in PeoPl, inputs and outputs are structured types.
More on [[#types][types]] later.


#+BEGIN_SRC peopl
thisReturns42: 'func [] -> Int {
  42
}
#+END_SRC

This syntax creates a function that takes nothing as input and returns 42.
Return statements do not exist because the are not necessary.

** Functions with inputs
Function inputs are different from regular function arguments.
Similar to how shell commands take their input from stdin.
They're analoguous to self or this in languages with object methods.
Inputs are usually anonymous, which means they can be pipelined directly into other functions.
However, if needed they can also be captured.

#+BEGIN_SRC peopl
square: 'func (Int)[] -> Int {
  |$in| in*in
}
#+END_SRC

** Function arguments
In addition to function input, functions also take extra arguments.
Extra arguments are always named.


#+BEGIN_SRC peopl
add: 'func [a Int, b Int] -> Int {
  a + b
}
#+END_SRC

if `()` are ommited, it means the functions takes nothing as input.
By nothing, I mean the type nothing.

** Calling functions
Functions with inputs need to be called on an object

#+BEGIN_SRC peopl
5.square() // returns 25
// or
5 |> square()
#+END_SRC

Functions with nothing as input can't receive a value as input

#+BEGIN_SRC peopl
5 |>
add(a: 1, b: 2) // Error: add expects nothing as input
#+END_SRC

Function with nothing as input can be considered as static functions.

* Definitions

Expressions are not allowed at a file top level.
The need to be binded to a label.

#+BEGIN_SRC peopl
a: 3 // creating the constant a with the value 3

main: 'func [] -> nothing { // main function
  _
}
#+END_SRC

The main function is the entry point of the program.
Other definitions can exist alongside it.

Define a value using this syntax

#+BEGIN_SRC peopl
label OptionalType: Expression
#+END_SRC

Expressions are can be 2 things
- Computable values
- Types
- Callables

Those are 3.

** Types
PeoPl has an expressive and powerful type system.
The goal of PeoPl type system is to grant simplicity to the activity of defining domain models.
Reduce boilerplate for defining constructs, and use consistant syntax for definitions everywhere

** Records, Tuples
The simplest type is the record/struct/tuple whatever you want to call it. It is the product type.

  
#+BEGIN_SRC peopl
Person: '[name String, age Int]
Point: '[Float, Float]
Circle: '[center Point, radius Float]
Rectangle: '[x Point, y Point, width Float, height Float]
#+END_SRC

** Choices, Enums, Tagged Unions
A useful construct for defining choices or options enumerations.
They are sum types. Similar to rust enums, but with a nicer syntax, I garantee.

#+BEGIN_SRC peopl
Color: 'choice [red _, blue _, green _, yellow _] // basic enums
ShapeUnion: 'choice [Circle, Rectangle] // unions (they are secretly tagged)
ShapeTaggedChoice: 'choice [circle Circle, rectangle Rectangle] // enums with associated values, or tagged unions
ShapeTaggedChoiceAlt: 'choice [
    circle '[center Point, radius Float],
    rectangle '[x Point, y Point, width Float, height Float]
]
// Definitions can be nested preventing the proliferations of small types that are only used in one place
#+END_SRC

** Functions
Functions are also types, this is why defining a function also starts with a ticked keywords `'func`
