namespace [
    AB::CA,
    CD,
    XC
]

type TheAmazingStruct<A, C>::B<C>::X<Z>
    Case2 a: Ex
    Case3

type X<Z> param: Z, sdf: S

impl X<Z> = X<I32>

const A::C::D.x = 3

fun (TheAmazingStruct<A, C>::B<C>::X<Z>::Case1<T>) A::C.foo(
    a: C
    d: D
) => Int::B
    |_| "sdfsdff",
    3 + 2 < "s" |>
    asd(a: s b: s) |>
    Never |>
    true |>
    false
