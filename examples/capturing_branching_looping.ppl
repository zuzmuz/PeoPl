** peopl doesn't support assignments
** rather you capture the input from the pipe
** capturing stops the flow of the pipe
** which means that `in` after the capture becomes Nothing
** the capture gives a name to `in`

** a function to know if number is pallindrome
func (I32) is_pallindrome() => Bool
    to_string();
    |original| original = (original; reverse()) ** saving the original string before the reverse
    ..


** a capture group can be an expression
** in this case we can create sub branches in the pipe chain
** if the expression evaluates to true, the body associated
** with the capture group will evaluate


func (I32) is_even() => String
    |i % 2 = 0| "is even",
    |_| "is odd"..

** subbranches are separated by ,

** looping can be performed by creating a looped pipe

func print(from: I32, to: I32) => Nothing
    from;
    |i < to| (i; print(); +1)^,
    Nothing
    ..

** the inside of the looped expression should output
** the same type of the pipe input.
** the looped expression outputs Never,
** this is why it needs to be sumed with a valid type
** otherwise it won't compile

** to mix looping and branching

func print(from: I32, to: I32) => Nothing
    from;
    |i < to| (
        |i % 2 = 0| (i; print(format: "{} is even")),
        |i| (i; print(format: "{} is odd"));
        +1)^,
    Nothing
    ..

** capturing is used for pattern mathing

