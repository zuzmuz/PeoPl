Almost: namespace


private Result[S, E in Error]: choice [
    success: S,
    private error: E
]


Transform[T, U]: (T) -> U

map[T, U]: (List[T]) [transform: (T) -> U] -> List[U] {
    _
}

Something: (Int) -> Optional[Int]

somethingElse: (Int) -> Result[Int, _] {
    (a: 1, b: 2).map(a: "whatever")
}


TimeSeconds: Double

TimeMinutes: Double


take: [time: TimeSeconds] -> TimeMinutes {
    time / 60.0
}


map: ([String, a: Int, b: Int]) -> Int {
    take(time: TimeSeconds(1000))
}

mapError[S, E1, E2]: (Result[S, E1]) [transform: (E1)->E2]-> Result[S, E2] {
    |error: $e| transform(e)
    |$s| s
}

mapNothing[S, E]: (Optional[S]) [transform: ()->E]-> Result[S, E] {
    |if a = 5| success: s 
    |> sdfsd 
    |>
    |_| transform()
}
main: (Result[Int, _]) -> Result[Int, _] {
    something()
    |> map {
        _
    }
    //|> print("sdfsfsdf %_0  %_1")
    |> whaterver()
    |>
    |success: $value if value < 0|
        value.checjsdf()
    |success: $value|
        value.xdfxdf()
    |error: $error|
        "sdfdfs"
}
