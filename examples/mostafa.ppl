
Result[S, E]: choice [
    success: S,
    error: E
]


something: (Int) -> Optional[Int] {
    error: _
}

somethingElse: (Int) -> Result[Int, _] {
    success: $s
}

mapError[S, E1, E2]: (Result[S, E1]) [transform: (E1)->E2]-> Result[S, E2] {
    |error: $e| transform(e)
    |$s| s
}

mapNothing[S, E]: (Optional[S]) [transform: ()->E]-> Result[S, E] {
    |something: $s| success: s 
    |> sdfsd |>
    |_| transform()
}
main: (Result[Int, _]) -> Result[Int, _] {
    something()
    |> somethingElse()
    //|> print("sdfsfsdf %_0  %_1")
    |> whaterver()
}
