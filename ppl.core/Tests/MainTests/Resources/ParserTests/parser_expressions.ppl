well: _

hello: "Hello, World!"

arithmetics: 1 + 20 * ( 5 - 2) - 3 / 1 * 3 + 10 % 3 - 10

hexOctBin: 0xFF + 0xF0 * 0o7 - 0b1101_1100_0101_0000

big_numbers: 1_000_0000_00

floating: 1.0 + 2.5 * (3.14 - 1.0) / 2.0

prefix: 1-+-5

conditions: you and me or nothing

complexConditions: (1+3) * 3 > 42 or something and ("this" = "that" or not theSame())


factorial: 'func [n: I32] -> I32 {
    n * factorial(n - 1)
}

isPallindrome: 'func (I32)[] -> Bool {
    to_string() |>
    |$original| original = original.reverse()
}

gcd: 'func [a: Int, b: Int] -> Int {
    |if a = b| a
    |if a < b| gcd(a: a, b: b - a)
    |if a > b| gcd(a: a - b, b: b)
}

allCaptures: 'func (Some\Object)[] -> Some\Other\Object {
    |Default\value| Default\value
    |.(d: $a, c: $c, s: $s, t: $t, r: $r, c: $c, t: $t)| a + c + s + t + r + c + t
    |n: (s: (t: (d: $value)))| value
    |.(n: $n, i: $i) if n = i| "they are equal"
}

allExpressionTypes: 'func [] -> _ {
    Something(1, 2, 3)
    |> modify(with: 10.0) 
    |> Nested\method(42) 
    |>
    |success: $s| s.content.value
    |error: $e| e.localized(lang: "EN").text 
    |>
    |$in if in > Scoped\Global\value| print("in is value")
    |0| log.error("in is zero")
}

unaries: 'func (Int)[] -> Int {
    + 2 |>
    - 4 |>
    * 2 |>
    / 1 |>
    % 9 |>
    > 0 |>
    >= 2 |>
    < 0 |>
    <= 2 |>
    = 1 |>
    not true
}
